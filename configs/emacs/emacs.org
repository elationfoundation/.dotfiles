#+TITLE: Emacs
#+AUTHOR: seamus tuohy
#+EMAIL: s2e@seamustuohy.com
#+DATE: 2015 Apr 18
#+TAGS: emacs core

#+BEGIN_SRC emacs-lisp
;;(setq debug-on-error t)
#+END_SRC

* Information

Personal Information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "seamus tuohy"
      user-mail-address "s2e@seamustuohy.com")
#+END_SRC

GPG key to use for encryption
Either the Key ID or set to nil to use symmetric encryption.

#+BEGIN_SRC emacs-lisp
(setq org-crypt-key "F2D7DAC4")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq private-dir "~/.s2e/")
  (defun in-private-dir (path)
    (concat private-dir path))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;;(add-to-list 'auth-sources (in-private-dir ".authinfo.gpg"))
#+END_SRC

* Personal key spaces

#+BEGIN_SRC emacs-lisp
(define-prefix-command 'personal-global-map)
(global-set-key (kbd "C-C s") 'personal-global-map)
#+END_SRC

* General Configuration
** Overwrite Highlighted Text
cua-selection-mode - enables typing over a region to replace it

#+BEGIN_SRC emacs-lisp
(cua-selection-mode t)
#+END_SRC

** Spaces vs. Tabs
No tabs for me.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq tab-width 4)
#+END_SRC

** UTF-8 by default

#+BEGIN_SRC emacs-lisp
(setq org-export-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-charset-priority 'unicode)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+END_SRC
* Packages
Set up my emacs main directory path.
#+BEGIN_SRC emacs-lisp
(setq emacs-dir "~/.emacs.d/")
(defun in-emacs-d (path)
  (concat emacs-dir path))
;(add-to-list 'load-path emacs-dir)
#+END_SRC
** Cask
#+BEGIN_SRC emacs-lisp
  (require 'cask "~/.cask/cask.el")
  (setq cask-filename "~/.emacs.d/Cask")
  (cask-initialize)
#+END_SRC

** Local
Create shortcut to packages directory
#+BEGIN_SRC emacs-lisp
(setq my-package-dir (in-emacs-d "packages/"))
(defun in-package-d (path)
  (concat my-package-dir path))
#+END_SRC

Load each package individually. Too busy with the re-write today to script up a loop.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (in-package-d "calfw"))
(add-to-list 'load-path (in-package-d "org-caldav"))
(add-to-list 'load-path (in-package-d "synonyms"))
(add-to-list 'load-path (in-package-d "writegood-mode"))
(add-to-list 'load-path (in-package-d "guru-mode"))
(add-to-list 'load-path (in-package-d "org-bullets"))
#+END_SRC

** Require

[[https://julien.danjou.info/projects/emacs-packages#org-contacts][org-contacts]], [[http://orgmode.org/w/?p=org-mode.git;a=blob_plain;f=contrib/lisp/org-notify.el;hb=HEAD][org-notify]]

#+BEGIN_SRC emacs-lisp
  (setq org-modules '(org-bbdb
                      org-contacts
                      org-gnus
                      org-annotate-file
                      org-toc
                      org-reqistry
                      org-notify
                      org-habit
                      org-irc))

  (eval-after-load 'org
    '(org-load-modules-maybe t))
#+END_SRC

I hate having to track down where I first require a package or have issues with my init ordering.
#+BEGIN_SRC emacs-lisp
  (require 'calfw)
  (require 'calfw-org)
  (require 'org-caldav)
  (require 'wrap-region)
  (require 'perspective)
  (require 'flycheck)
  (require 'bbdb)
  (require 'web-mode)
  (require 'lisp-mode)
  (require 'yaml-mode)
  (require 'syslog-mode)
  (require 'hideshow-org)
  (require 'popwin)
  (require 'rainbow-mode)
  (require 'message)
  (require 'gnus)
  (require 'starttls)
  (require 'notmuch)
  (require 'epg)
  (require 'epa)
  (require 'smtpmail)
  (require 'spam)
  (require 'org-gnus)
  (require 'uniquify)
  (require 'real-auto-save)
  (require 'guide-key)
  (require 'undo-tree)
  (require 'company)
  ; (require 'auto-complete)
  ; (require 'auto-complete-config)
  (require 'yasnippet)
  (require 'helm-dash)
  ;;(require 'sublimity-scroll)
  (require 'projectile)
  (require 'helm)
  (require 'helm-config)
  (require 'cask "~/.cask/cask.el")
  (require 'server)
  (require 'drag-stuff)
  (require 'diff-hl)
  (require 'expand-region)
  (require 'org)
  (require 'org-registry)
  (require 'org-notify)
  (require 'epa-file)
  (require 'org-crypt)
  (require 'org-protocol)
  (require 'org-id)
  (require 'org-bullets)
#+END_SRC

* Emacs Environment
** Server

Start a server when there is not a server already running.
#+BEGIN_SRC emacs-lisp
(require 'server)
(or (server-running-p)
    (server-start))
#+END_SRC

** Confirmation
I like to stay in my emacs environment. Make sure emacs isn't accidentally killed

#+BEGIN_SRC emacs-lisp
  (defun paranoid-exit-from-emacs()
   (interactive)
   (if (yes-or-no-p "Do you want to exit? ")
       (save-buffers-kill-emacs)))
#+END_SRC


I do hate typing the full yes or no though
yes/no turns to y/n
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-x\C-c" 'paranoid-exit-from-emacs)
#+END_SRC
* Text Manipulation
** Drag Stuff
Use the super key and the control key to drag lines in any file anywhere I want.
#+BEGIN_SRC emacs-lisp
; drag stuff
(require 'drag-stuff)
(setq drag-stuff-modifier '(super control))
(drag-stuff-global-mode t)
#+END_SRC

** Expand Region
Use C-= and C-- to expand and contract the highlighed portion to include what it currently knows as the region.
Huge time saver.
; expand-region
#+BEGIN_SRC emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
(global-set-key (kbd "C--") 'er/contract-region)
#+END_SRC

* Load all other init files (elisp files)

Define where init files are ( ~/.emacs.d/elisp)
#+BEGIN_SRC emacs-lisp
(setq personal-elisp-dir (in-emacs-d "elisp/"))
(defun in-personal-elisp-d (path)
  (concat personal-elisp-dir path))
#+END_SRC

Function to load any file not starting with . in the elisp dir
#+BEGIN_SRC emacs-lisp
(defun load-visible-elisp (part-name)
  (if (not (string-prefix-p "." part-name))
      (load-file (concat personal-elisp-dir "/" part-name))))
#+END_SRC

Hook to actually iterate through all elisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook (lambda ()
                               (mapcar 'load-visible-elisp (sort (directory-files personal-elisp-dir) 'string<))))
  (add-hook 'after-init-hook (lambda ()
                               (mapcar 'message (sort (directory-files personal-elisp-dir) 'string<))))
#+END_SRC

* Technical Artifacts

  Make sure that we can simply =require= this library.

#+BEGIN_SRC elisp
  (provide 'init-emacs)
#+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: The core runner for my emacs files
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs.d/init.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
