#+TITLE: Emacs Help
#+AUTHOR: seamus tuohy
#+EMAIL: s2e@seamustuohy.com
#+DATE: 2015 Apr 18
#+TAGS: emacs help

* Writing Help
** Spell Checking
I use flyspell mode for spell checking for any text files.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-flyspell 'append)
(add-hook 'message-mode-hook 'turn-on-flyspell 'append)

#+END_SRC

** Synonyms
*** KeyBindings
#+BEGIN_QUOTE
`C-u'     - Search for additional synonyms, in two senses:

    1) Return also synonyms that are matched partially by the input.

    2) Search the entire thesaurus for input matches, even if the input matches a thesaurus entry.

`M--'     - Append the search results to any previous search results, in buffer *Synonyms*.  (Normally, the new results replace any previous results.)

`C-u C-u' - `C-u' plus `M--': Search more and append results.
#+END_QUOTE

*** Define path for synonyms code and thesaurus
#+BEGIN_SRC emacs-lisp
(setq synonyms-file        "~/.emacs.d/resources/thesaurus/mthesaur.txt")
(setq synonyms-cache-file  "~/.emacs.d/cache/thesaurus.txt")
(require 'synonyms)
#+END_SRC

** Writegood mode

helps me write-good.

#+BEGIN_SRC emacs-lisp
(require 'writegood-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(define-key personal-global-map (kbd "ww") 'writegood-mode)
(define-key personal-global-map (kbd "wl") 'writegood-grade-level)
(define-key personal-global-map (kbd "we") 'writegood-reading-ease)
#+END_SRC

* Emacs Help
** Guide Key
[[https://github.com/kai2nenobu/guide-key][guide-key.el]] displays the available key bindings automatically and dynamically. guide-key aims to be an alternative of one-key.el.

#+BEGIN_SRC emacs-lisp
  (require 'guide-key)
  (setq guide-key/guide-key-sequence t)
  (guide-key-mode 1)
  (setq guide-key/idle-delay .5)
  (setq guide-key/popup-window-position 'bottom)
#+END_SRC

** Emacs Guru Mode
[[https://github.com/bbatsov/guru-mode][Guru mode]] disables some common keybindings and suggests the use of the established Emacs alternatives instead.

#+BEGIN_SRC emacs-lisp
(require 'guru-mode)
#+END_SRC

Currently running this globally. I may want to change this if I get too annoyed.
#+BEGIN_SRC emacs-lisp
  (guru-global-mode +1)
  ;;(add-hook 'prog-mode-hook 'guru-mode)
#+END_SRC

I only want to get warnings when I use the arrow keys.
#+BEGIN_SRC emacs-lisp
(setq guru-warn-only t)
#+END_SRC

** Undo Help
Undo tree makes complex undo actions easy
#+BEGIN_SRC emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode t)
#+END_SRC
(define-key personal-global-map (kbd "u") 'undo-tree-visualize)

*** Keep region when undoing in region
Make it so the region does not keep jumping about when I use it.
Via" [[http://whattheemacsd.com/my-misc.el-02.html][what the emacs.d]]

#+BEGIN_SRC emacs-lisp
(defadvice undo-tree-undo (around keep-region activate)
  (if (use-region-p)
      (let ((m (set-marker (make-marker) (mark)))
            (p (set-marker (make-marker) (point))))
        ad-do-it
        (goto-char p)
        (set-mark m)
        (set-marker p nil)
        (set-marker m nil))
    ad-do-it))
#+END_SRC

* Text Help
** Company Mode
#+BEGIN_SRC emacs-lisp
(require 'company)
(setq company-idle-delay 0.5)
(setq company-tooltip-limit 10)
(setq company-minimum-prefix-length 2)

;; invert the navigation direction if the the completion popup-isearch-match
;; is displayed on top (happens near the bottom of windows)
(setq company-tooltip-flip-when-above t)

(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

** Auto-Complete Mode
I am currently giving company mode a try out as an alternative to auto-complete mode.

#+BEGIN_SRC emacs-lisp
; (require 'auto-complete)
; (require 'auto-complete-config)
; (global-auto-complete-mode t)
; (ac-config-default)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;(defun ac-python-mode-setup ()
;  (setq ac-sources (append '(ac-source-yasnippet ac-source-semantic) ac-sources)))
;
;(add-hook 'python-mode-hook 'ac-python-mode-setup)
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas/global-mode 1)
(setq yas/indent-line 'fixed) ; for indented snippets
#+END_SRC

YASnippet - should appear before custom-set-variables

#+BEGIN_SRC emacs-lisp
(defcustom python-snippet-debugger "pdb"
  "Which python debugger should be used in the pdb template"
  :type 'string
  :group 'yasnippet)
#+END_SRC

Rebind yasnippet-expand to C-c tab. This is because the new version of yasnippet has a wrong fallback to the default <tab>, breaking Python's indentation cycling feature, and possibly other things too.
    - See:
       - https://github.com/fgallina/python.el/issues/123
       - https://github.com/capitaomorte/yasnippet/issues/332
#+BEGIN_SRC emacs-lisp
(add-hook 'yas-minor-mode-hook
          '(lambda ()
             (define-key yas-minor-mode-map [(tab)] nil)
             (define-key yas-minor-mode-map (kbd "TAB") nil)
             (define-key yas-minor-mode-map  (kbd "<C-tab>") 'yas-expand-from-trigger-key)))
#+END_SRC


** Helm Dash

#+BEGIN_SRC emacs-lisp
(require 'helm-dash)
#+END_SRC

*** Install doc-sets via: [[https://github.com/glynnforrest/emacs.d/blob/75589b87af99167517682f1bbbacad1f55de2438/site-lisp/setup-helm.el][glynn forrest]]
#+BEGIN_SRC emacs-lisp

  (defvar helm-dash-required-docsets '()
    "A list of required helm-dash-docsets")

  (setq helm-dash-required-docsets
        )

  ;; By default, no docsets are enabled.
  (setq helm-dash-common-docsets '(
          "Ansible"
          "Bash"
          "CSS"
          "HTML"
          "JavaScript"
          "LaTeX"
          "Markdown"
          "Python 2"
          "Python 3"
          "D3JS"
          "Lua_5.2"
          "Emacs_Lisp"
          "Flask"
          ))
#+END_SRC

*** Set our custom hooks for various modes

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook '(lambda () (setq-local helm-dash-docsets '("Emacs Lisp"))))
(add-hook 'c-mode-hook '(lambda () (setq-local helm-dash-docsets '("C"))))
(add-hook 'sh-mode-hook '(lambda () (setq-local helm-dash-docsets '("Bash"))))
(add-hook 'lua-mode-hook '(lambda () (setq-local helm-dash-docsets '("Lua"))))
(add-hook 'markdown-mode-hook '(lambda () (setq-local helm-dash-docsets '("Markdown" "LaTeX"))))
(add-hook 'org-mode-hook '(lambda () (setq-local helm-dash-docsets '("LaTeX" "Emacs Lisp" "Bash" "Python" "HTML"))))

;; Web based docs
(add-hook 'web-mode-hook '(lambda () (setq-local helm-dash-docsets '("D3.js" "HTML" "CSS" "JavaScript"))))
(add-hook 'javascript-mode-hook '(lambda () (setq-local helm-dash-docsets '("D3.js" "JavaScript"))))

;;python docs
(add-hook 'python-mode-hook '(lambda () (setq-local helm-dash-docsets '("Ansible" "Flask" "Python"))))
#+END_SRC

*** Use the eww browser to view docsets
#+BEGIN_SRC emacs-lisp
(setq helm-dash-browser-func 'eww-browse-url)
#+END_SRC

*** Create keybindings
#+BEGIN_SRC emacs-lisp
(define-key personal-global-map (kbd "h d") 'helm-dash)
(define-key personal-global-map (kbd "h p") 'helm-dash-at-point)
#+END_SRC


* Technical Artifacts

  Make sure that we can simply =require= this library.

#+BEGIN_SRC elisp
  (provide 'init-emacs-help)
#+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: Help for various emacs needs.
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs.d/elisp/emacs-help.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
