#+TITLE: Emacs Communication
#+AUTHOR: seamus tuohy
#+EMAIL: stuohy@internews.org
#+DATE: 2015 May 14
#+TAGS: org emacs communications

* IRC
#+BEGIN_SRC emacs-lisp
  (use-package erc
    :ensure t :defer t
    :config
    (setq erc-nick "elation")
    (require 'erc-list)
    (setq erc-hide-list '("JOIN" "PART" "QUIT"))
    (add-to-list 'erc-modules 'list)
    (erc-update-modules))
#+END_SRC

** Channels list commented out because it is contained in a project file with other channels.
#+BEGIN_SRC emacs-lisp
    ;; (setq erc-autojoin-channels-alist '(("freenode.net"
    ;;                                      "#emacs"
    ;;                                      "#emacs"
    ;;                                      "#org-mode"
    ;;                                      "#recon-ng"
    ;;                                      "#commotion")))
#+END_SRC

* Email
** Notmuch
*** Setup
#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :commands notmuch
    :init
    (setq
     ;; === SHOW EMAIL ===
     ; Allows GPG to work cleanly by not indenting messages in threads
     notmuch-show-indent-messages-width 0
     ;; === SEARCH EMAIL ===
     notmuch-search-oldest-first nil
     notmuch-fcc-dirs "Sent/"
     ;; === Crypto ===
     ;multipart/signed messages will be verified and multipart/encrypted parts will be    decrypted
     notmuch-crypto-process-mime t
    ;; == SENDING MAIL
     message-kill-buffer-on-exit t))

  (use-package org-notmuch)

  (defun notmuch-search-filter-by-date (days)
    (interactive "NNumber of days to display: ")
    (let* ((now (current-time))
           (beg (time-subtract now (days-to-time days)))
           (filter
            (concat
             (format-time-string "%s.." beg)
             (format-time-string "%s" now))))
      (notmuch-search-filter filter)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq notmuch-fcc-dirs "Sent/")
#+END_SRC

*** Contacts

#+BEGIN_SRC emacs-lisp
(setq org-contacts-files '("~/.s2e/contacts.org"))
#+END_SRC

Look at my emacs-org.org setup for org contacts capture.
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'org-capture-templates
  ;;              '("@" "Contacts" entry (file "~/.s2e/contacts.org")
  ;;                "* %(org-contacts-template-name)
  ;; :PROPERTIES:
  ;; :EMAIL: %(org-contacts-template-email)
  ;; :END:"))
#+END_SRC

*** Org
#+BEGIN_SRC emacs-lisp
(setq org-link-mailto-program '(browse-url-mail "mailto:%a?subject=%s"))
#+END_SRC
*** OfflineImap
Commented out becuase it never seems to work.
#+BEGIN_SRC emacs-lisp
; (use-package offlineimap
;   :load-path "packages/offlineimap/"
;   :commands offlineimap
;   :init
;   (add-hook 'gnus-before-startup-hook 'offlineimap))
#+END_SRC

* Twitter
#+BEGIN_SRC emacs-lisp
  (use-package twittering-mode
  :load-path "packages/twittering-mode"
  :commands twit
  :config
  (setq twittering-use-master-password t))
#+END_SRC
* Technical Artifacts

  Make sure that we can simply =require= this library.

#+BEGIN_SRC elisp
  (provide 'init-emacs-communication)
#+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION:
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs.d/elisp/emacs-communication.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
