#+TITLE: Emacs Code
#+AUTHOR: s2e
#+EMAIL: s2e@device
#+DATE: 2015 Apr 18
#+TAGS: org code programming

* Text Manipulation
** Return and indent on prog-mode variants
#+BEGIN_SRC emacs-lisp
(defun code/set-newline-and-indent ()
  (local-set-key [(return)] 'newline-and-indent))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'code/set-newline-and-indent)
#+END_SRC

** Wrap Regions
#+BEGIN_SRC emacs-lisp
; wrap-region
(require 'wrap-region)
(add-hook 'prog-mode-hook (lambda () (wrap-region-mode t)))
(add-hook 'markdown-mode-hook (lambda () (wrap-region-mode t)))

(wrap-region-add-wrapper "*" "*")
#+END_SRC

* FlyCheck

#+BEGIN_SRC emacs-lisp
(require 'flycheck)
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c m f") 'flycheck-mode)
(global-set-key (kbd "C-c f r")
                '(lambda ()
                   (interactive)
                   (flycheck-mode t)))

(global-set-key [(f5)] 'flycheck-previous-error)
(global-set-key [(f6)] 'flycheck-next-error)
#+END_SRC

** Mode Hooks
#+BEGIN_SRC emacs-lisp
; turn on flycheck-mode in python-mode
(add-hook 'python-mode-hook '(lambda () (flycheck-mode)))
(add-hook 'sh-mode-hook '(lambda () (flycheck-mode)))
#+END_SRC

* Language Specific
** HTML
#+BEGIN_SRC emacs-lisp
; web-mode
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
#+END_SRC

** XML
Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules.
#+BEGIN_SRC emacs-lisp
(defun bf-pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
      (nxml-mode)
      (goto-char begin)
      (while (search-forward-regexp "\>[ \\t]*\<" nil t)
        (backward-char) (insert "\n"))
      (indent-region begin end))
    (message "Ah, much better!"))
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
(autoload 'markdown-mode "markdown-mode.el" nil t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;; flyspell mode for spell checking in markdown
(add-hook 'markdown-mode-hook 'turn-on-flyspell 'append)
#+END_SRC

** YAML
#+BEGIN_SRC emacs-lisp
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
#+END_SRC

** LogFiles
#+BEGIN_SRC emacs-lisp
 (require 'syslog-mode)
 (add-to-list 'auto-mode-alist '("/var/log.*\\'" . syslog-mode))
#+END_SRC

** python
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
#+END_SRC
** Lisp
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.el\\'" . lisp-mode))
#+END_SRC

* Code Folding
#+BEGIN_SRC emacs-lisp
(setq hs-hide-comments-when-hiding-all +1)
(setq hs-isearch-open t)
(require 'hideshow-org)
; Displaying overlay content in echo area or tooltip
(defun display-code-line-counts (ov)
      (when (eq 'code (overlay-get ov 'hs))
        (overlay-put ov 'help-echo
                     (buffer-substring (overlay-start ov)
                                      (overlay-end ov)))))

    (setq hs-set-up-overlay 'display-code-line-counts)
; How do I get it to expand upon a goto-line?
(defadvice goto-line (after expand-after-goto-line
                                activate compile)
        "hideshow-expand affected block when using goto-line in a collapsed buffer"
        (save-excursion
           (hs-show-block)))

#+END_SRC
* Technical Artifacts

  Make sure that we can simply =require= this library.

#+BEGIN_SRC elisp
  (provide 'init-emacs-code)
#+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: Configures my programming needs
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs.d/elisp/emacs-code.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
