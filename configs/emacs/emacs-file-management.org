#+TITLE: Emacs File Management
#+AUTHOR: seamus tuohy
#+EMAIL: s2e@seamustuohy.com
#+DATE: 2015 Apr 18
#+TAGS: emacs files

* Cleanup

I use these files for cleaning buffers when I save, or get annoyed by red highlighted spaces everywhere.

#+BEGIN_SRC emacs-lisp
(defun file-management/cleanup-buffer-safe ()
  "Perform a bunch of safe operations on the whitespace content of a buffer.
Does not indent buffer, because it is used for a before-save-hook, and that
might be bad."
  (interactive)
  (if (not (or (string= major-mode 'makefile-gmake-mode)
               (string= major-mode 'makefile-mode)))
      (untabify (point-min) (point-max)))
  (delete-trailing-whitespace)
  (set-buffer-file-coding-system 'utf-8))

(defun file-management/cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer.
Including indent-buffer, which should not be called automatically on save."
  (interactive)
  (file-management/cleanup-buffer-safe)
  (indent-region (point-min) (point-max)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c n") 'file-management/cleanup-buffer)
#+END_SRC

Add the hook.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'file-management/cleanup-buffer-safe)
#+END_SRC

* Syncing

** When files change on disk I want the buffers to change to match them. 
I will modify text files in bash while they are open in emacs when I need to do more automated modification.
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

** I force emacs to assume new files are always modified. This is useful for  creating empty files.
#+BEGIN_SRC emacs-lisp
(defun file-management/assume-new-is-modified ()
  (when (not (file-exists-p (buffer-file-name)))
    (set-buffer-modified-p t)))
#+END_SRC

Add the hook

#+BEGIN_SRC emacs-lisp
(add-hook 'find-file-hooks 'file-management/assume-new-is-modified)
#+END_SRC

* Identification
uniquify shows a files location when it shares the same name as another file. 
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq
  uniquify-buffer-name-style 'post-forward
  uniquify-separator ":")
#+END_SRC

I like my desktop to be saved across sessions.
#+BEGIN_SRC emacs-lisp
(desktop-save-mode 1)
(setq desktop-restore-eager 10)
#+END_SRC
* Backups

I use close to the basic backup setup described in the [[http://emacswiki.org/emacs/BackupDirectory][emacswiki.]]

#+BEGIN_SRC emacs-lisp
;;(setq temporary-file-directory "/tmp/")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
   `((".*" . ,temporary-file-directory))
   auto-save-file-name-transforms
   `((".*" ,temporary-file-directory t))
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+END_SRC

Automatically purge backup files not accessed in a week:
#+BEGIN_SRC emacs-lisp
  (message "Deleting old backup files...")
  (let ((week (* 60 60 24 7))
        (current (float-time (current-time))))
    (dolist (file (directory-files temporary-file-directory t))
      (when (and (backup-file-name-p file)
                 (> (- current (float-time (fifth (file-attributes file))))
                    week))
        (message "%s" file)
        (delete-file file))))
#+END_SRC

* Auto-Save

#+BEGIN_SRC emacs-lisp
 (require 'real-auto-save)
(add-hook 'prog-mode-hook 'real-auto-save-mode)
(setq real-auto-save-interval 30)
#+END_SRC 
* Technical Artifacts

  Make sure that we can simply =require= this library.

#+BEGIN_SRC elisp
  (provide 'init-emacs-file-management)
#+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: Configurations for dealing with files.
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs.d/elisp/emacs-file-management.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
