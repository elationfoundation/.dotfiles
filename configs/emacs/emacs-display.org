#+TITLE: emacs-display
#+AUTHOR: seamus tuohy
#+EMAIL: s2e@seamustuohy.com
#+DATE: 2015 Apr 18
#+TAGS: emacs display

* Mark and Cursor

I like to have the mark always active when I am selecting text.  This highlights the mark area.
NOTE: I am currently exploring how to correctly use the mark, so this may become an annoyance.

#+BEGIN_SRC emacs-lisp
  (setq transient-mark-mode t)
#+END_SRC

I like to know exactly what character my cursor is on. This sets the cursor to be a box on top of that character.

#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'box)
#+END_SRC

I want to see parens highlighted and I want them immediately.

#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode)
#+END_SRC

* Indicators
** Line number mode
I want to know what line number I am on. Line-number-mode keeps track of this for me globally.
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
#+END_SRC

** Frame shows buffer name
When not clocked into a task I want to see the full path of the current buffer I am in in the title frame.
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
#+END_SRC

** Git Changes in the fringe
In any programming major mode I use [diff-hl](https://github.com/dgutov/diff-hl) for highlighting uncommitted changes to my files  in the fringe.
- Red shows deleted lines (sometimes)
- Green shows added lines
- Blue Shows changed lines.
#+BEGIN_SRC emacs-lisp

(add-hook 'prog-mode-hook '(lambda () (diff-hl-mode)))
#+END_SRC

** Display trailing whitespace in code
I want trailing whitespaces displayed when I am in programming mode.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda ()
                              (setq show-trailing-whitespace t)))
#+END_SRC

** Line Numbers for coding
When coding I  want to have my line number displayed on every line.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook '(lambda () (linum-mode)))
#+END_SRC

** visual bells

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
(setq visible-bell t)
#+END_SRC

* Clean up

Get rid of the annoying menubars, toolbars, scrollbars, bells, and splash screens.
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (if (boundp 'tool-bar-mode)
      (tool-bar-mode 0))
  (if (fboundp 'scroll-bar-mode)
      (scroll-bar-mode 0))
  (setq ring-bell-function 'ignore)
  (setq inhibit-splash-screen t)
#+END_SRC

This makes the frame title format the currently active buffer so I can just look up to see the full path of whatever file I am modifying. [[file:emacs-clocking.org][See emacs-clocking for modifications for showing clocked tasks in the title frame.]]
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
#+END_SRC

I use popwin mode to make sure that temporary buffers act as pop-up windows and can be closed with <C-g>.
#+BEGIN_SRC emacs-lisp
  (require 'popwin)
  (popwin-mode 1)
#+END_SRC

* Splitting Windows

These settings split the window and load a previous buffer (instead of the same buffer in both).
This has a better chance of being what I want when splitting strings. See: http://www.reddit.com/r/emacs/comments/25v0eo/you_emacs_tips_and_tricks/chldury
#+BEGIN_SRC emacs-lisp
  (defun bnb/vplit-last-buffer ()
    (interactive)
    (split-window-vertically)
    (other-window 1 nil)
    (switch-to-next-buffer))

  (defun bnb/hsplit-last-buffer ()
    (interactive)
    (split-window-horizontally)
    (other-window 1 nil)
    (switch-to-next-buffer))

  (global-set-key (kbd "C-x 2") 'bnb/vplit-last-buffer)
  (global-set-key (kbd "C-x 3") 'bnb/hsplit-last-buffer)
#+END_SRC

* Perspective
** Config
[[http://www.wickeddutch.com/2014/01/03/gaining-some-perspective-in-emacs/][Mostly taken from Wicked Dutch]]
Setup perspectives, or workspaces, to switch between

Enable perspective mode
#+BEGIN_SRC emacs-lisp
(persp-mode t)
#+END_SRC

loading code for our custom perspectives
taken from Magnar Sveen
#+BEGIN_SRC emacs-lisp
  (defmacro custom-persp (name &rest body)
    `(let ((initialize (not (gethash ,name perspectives-hash)))
           (current-perspective persp-curr))
       (persp-switch ,name)
       (when initialize ,@body)
       (setq persp-last current-perspective)))
#+END_SRC

Jump to last perspective
taken from Magnar Sveen
#+BEGIN_SRC emacs-lisp
  (defun custom-persp-last ()
    (interactive)
    (persp-switch (persp-name persp-last)))
#+END_SRC

Easily switch to your last perspective
#+BEGIN_SRC emacs-lisp
(define-key persp-mode-map (kbd "C-x p -") 'custom-persp-last)
#+END_SRC

** Calendar

#+BEGIN_SRC emacs-lisp
  (defun custom-persp/start-calendar ()
    (interactive)
    (custom-persp "calendar")
    (setq cfw:render-line-breaker 'cfw:render-line-breaker-none)
    (delete-other-windows) ;Delete all windows in this perspective.
    (org-caldav-sync) ;;sync with the online calendar (possibly do this at startup instead of here)
    (cfw:open-org-calendar)
    )

  (defun custom-persp/calendar ()
    (interactive)
    (custom-persp "calendar")
    (setq cfw:render-line-breaker 'cfw:render-line-breaker-none)
    (delete-other-windows) ;Delete all windows in this perspective.
    (cfw:open-org-calendar)
    )

  (define-key persp-mode-map (kbd "C-x p C") 'custom-persp/start-calendar) ;;only on first time do we sync
  (define-key persp-mode-map (kbd "C-x p c") 'custom-persp/calendar)
#+END_SRC

** Email
#+BEGIN_SRC emacs-lisp
  (defun custom-persp/start-email ()
    (interactive)
    (custom-persp "email")
    (gnus-icalendar-setup) ; Needed to make capture templates work. e.g. they should be loaded last, but my projects are and they muck with the templates.
    (gnus-icalendar-org-setup)
    (notmuch))
  ;;TODO add start offline imap

    (defun custom-persp/email ()
      (interactive)
      (custom-persp "email"))

      (define-key persp-mode-map (kbd "C-x p E") 'custom-persp/start-email)
      (define-key persp-mode-map (kbd "C-x p e") 'custom-persp/email)
#+END_SRC

** Org Agenda
org-agenda persp
#+BEGIN_SRC emacs-lisp
    (defun custom-persp/org-agenda ()
      (interactive)
      (custom-persp "org")
      (org-agenda nil "ta"))

      (define-key persp-mode-map (kbd "C-x p o") 'custom-persp/org-agenda)
#+END_SRC

** IRC
#+BEGIN_SRC emacs-lisp
      (defun custom-persp/start-irc ()
        (interactive)
        (custom-persp "irc")
        (erc :server "irc.freenode.net" :port "6667" :password nil))
      (defun custom-persp/irc ()
        (interactive)
        (custom-persp "irc"))

        (define-key persp-mode-map (kbd "C-x p I") 'custom-persp/start-irc)
        (define-key persp-mode-map (kbd "C-x p i") 'custom-persp/irc)
#+END_SRC


* Pretty Things
** Themes
I keep my themes in a separate themes directory in my .emacs.d folder.
#+BEGIN_SRC  emacs-lisp
(add-to-list 'custom-theme-load-path (in-emacs-d "themes"))
#+END_SRC

Load my current theme.
#+BEGIN_SRC emacs-lisp
  (load-theme 'tango-dark t)
#+END_SRC

** Colors
#+BEGIN_SRC emacs-lisp
(require 'rainbow-mode)
(add-to-list 'find-file-hook
             (lambda () (unless (derived-mode-p 'web-mode) (rainbow-mode))))
#+END_SRC

** Fonts
#+BEGIN_SRC emacs-lisp
;; (setq my/font-family "M+ 1mn")
;;(setq my/font-family "Source Code Pro")
;;(setq my/font-family "hermit")
;; (setq my/font-family "Anonymous Pro")
;;(set-frame-font my/font-family)
;;(set-face-attribute 'default nil :font my/font-family :height 120)
;;(set-face-font 'default my/font-family)
#+END_SRC
** Quotes
#+BEGIN_SRC emacs-lisp
;; Quote of the Day
(setq totd-file "~/.dotfiles/.quotes")

(defun totd()
  (random t)
  (let ((stars "*****************************")
        (tip (with-temp-buffer
               (insert-file-contents totd-file)
               (goto-line (1+ (random
                               (count-lines (point-min)
                                            (point-max)))))
               (buffer-substring (point) (line-end-position)))))
    (momentary-string-display
     (concat "\n\n" stars "\n"
             "Elation Foundation:\n"
             "\n" tip "\n\n"
             stars "\n\n")
      (window-start) ?\r
      "Hit any key when done reading")))
(totd)
#+END_SRC
* Technical Artifacts

  Make sure that we can simply =require= this library.

#+BEGIN_SRC elisp
  (provide 'init-emacs-display)
#+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: Contains all emacs configurations related to display and prettyness.
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs.d/elisp/emacs-display.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
