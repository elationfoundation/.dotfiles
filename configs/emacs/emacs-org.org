#+TITLE: Emacs Org
#+AUTHOR: seamus tuohy
#+EMAIL: s2e@seamustuohy.com
#+DATE: <2015-04-28 Tue>
#+TAGS: emacs org babel

* General
** Org-Modules

[[https://julien.danjou.info/projects/emacs-packages#org-contacts][org-contacts]], [[http://orgmode.org/w/?p=org-mode.git;a=blob_plain;f=contrib/lisp/org-notify.el;hb=HEAD][org-notify]]

#+BEGIN_SRC emacs-lisp
  (setq org-modules '(org-bbdb
                      org-contacts
                      org-gnus
                      org-annotate-file
                      org-toc
                      org-notmuch
                      org-notify
                      org-habit
                      org-irc))

  (eval-after-load 'org
    '(org-load-modules-maybe t))
#+END_SRC
** Requirements
#+BEGIN_SRC emacs-lisp
(require 'org)
#+END_SRC

** Files to activate org for
Open org-mode for .org files and for .org.gpg files.
Read [[http://ergoemacs.org/emacs/emacs_auto-activate_a_major-mode.html][this]] for how to format these strings. Then go and buy his book. It is the same content, but it is really good content and should be supported.

Ends with ".org"
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist
               '("\\.org\\'" . org-mode))
#+END_SRC

".org.gpg" occurs at least once in the file name. I use this when I open my archive files.
#+BEGIN_SRC emacs-lisp
;;   (add-to-list 'auto-mode-alist '("\\(\\.org\\.gpg\\)?$" . org-mode))
#+END_SRC

** Auto Save
 Set auto-save for org mode files every hour, on the hour.
#+BEGIN_SRC emacs-lisp
(run-at-time "00:59" 3600 'org-save-all-org-buffers)
#+END_SRC
* Filing
** Keywords
#+BEGIN_SRC emacs-lisp
;; keyword bindings
(setq org-todo-keywords (quote ((sequence "TODO(t)" "NEXT(n)" "TASK(T)" "|" "DONE(d!)")
                                (sequence "WAIT(w@!/@!)"  "SOMEDAY(s)" "CANCELED(C)")
                                (sequence "REPLY(r@/!)" "CONTACT(c@/!)" "MEETING(M)"))))
#+END_SRC

Set the colors and properties for org mode tags
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces
        (quote (
                ("TODO" :foreground "red" :weight bold)
                ("TASK" :foreground "red" :weight bold)
                ("NEXT" :foreground "red" :weight bold)
                ("CONTACT" :foreground "orange" :weight bold)
                ("REPLY" :foreground "orange" :weight bold)
                ("WAIT" :foreground "orange" :weight bold)
                ("MEETING" :foreground "DarkGoldenrod2" :weight bold)
                ("EVENT" :foreground "DarkGoldenrod2" :weight bold)
                ("DONE" :foreground "cornflower blue" :weight bold)
                ("SOMEDAY" :foreground "cornflower blue" :weight bold)
                ("IDEA" :foreground "blue" :weight bold))))

  (setq org-todo-state-tags-triggers
        (quote (("SOMEDAY" ("SOMEDAY" . t))
                ("WAIT" ("WAIT" . t))
                ("TODO" ("WAIT") ("SOMEDAY"))
                ("TASK" ("WAIT") ("SOMEDAY"))
                ("CONTACT" ("WAIT" .t))
                ("DONE" ("WAIT") ("SOMEDAY"))
                ("NEXT" ("WAIT")))))
#+END_SRC
** Capture

Capture Mode
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "~/.org/todo/to_file.org")
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

Capture templates for TODO tasks, Notes, appointments, phone calls, meetings,
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '(
                                      ("f" "TO FILE")
                                      ("ft" "todo" entry (file "~/.org/todo/to_file.org")
                                       "* TODO %?\n:PROPERTIES:\n:ID: %(org-id-uuid)\n:CAPTURED:\s%U\n:END:\n" :clock-in t :clock-resume t)
                                      ("fT" "task" entry (file "~/.org/todo/to_file.org")
                                       "* TASK %?\n:PROPERTIES:\n:ID: %(org-id-uuid)\n:CAPTURED:\s%U\n:WITH:%^{Do With?}\n:END:\n" :clock-in t :clock-resume t)
                                      ("fr" "respond" entry (file "~/.org/todo/to_file.org")
                                       "* NEXT [[notmuch:id:%:message-id][Respond to %:from on %:subject]]\nSCHEDULED: %t\n%U\n" :clock-in t :clock-resume t :immediate-finish t)
                                      ("fn" "note" entry (file "~/.org/todo/to_file.org")
                                       "* %? :NOTE:\n:PROPERTIES:\n:ID: %(org-id-uuid)\n:CAPTURED:\s%U\n:END:\n" :clock-in t :clock-resume t)
                                      ("fm" "Meeting" entry (file "~/.org/todo/to_file.org")
                                       "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                                      ("fp" "Phone call" entry (file "~/.org/todo/to_file.org")
                                       "* PHONE %? :PHONE:\n:PROPERTIES:\n:ID: %(org-id-uuid)\n:CAPTURED:\s%U\n:END:" :clock-in t :clock-resume t)
                                      ("fh" "Habit" entry (file "~/.org/todo/to_file.org")
                                       "* NEXT %?\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:ID: %(org-id-uuid)\n:CAPTURED:\s%U\n:END:\n)")
                                      ("fi" "idea" entry (file "~/.org/todo/to_file.org")
                                       "* IDEA %?\n:PROPERTIES:\n:ID: %(org-id-uuid)\n:CAPTURED:\s%U\n:END:\n" :clock-in t :clock-resume t)
                                      ("fw" "wait" entry (file "~/.org/todo/to_file.org")
                                       "* WAIT for %?\n:PROPERTIES:\n:ID: %(org-id-uuid)\n:CAPTURED:\s%U\n:END:\n" :clock-in t :clock-resume t)
                                      ("fc" "Contact" entry (file "~/.org/todo/to_file.org")
                                       "* CONTACT %?\n:PROPERTIES:\n:ID: %(org-id-uuid)\n:CAPTURED:\s%U\n:END:\n" :clock-in t :clock-resume t)
                                      ("fe" "Event" entry (file "~/.org/todo/to_file.org")
                                       "* EVENT %?:EVENT:\n:PROPERTIES:\n:ID: %(org-id-uuid)\n:CAPTURED:\s%U\n:END:\n" :clock-in t :clock-resume t)))

#+END_SRC

https://stackoverflow.com/questions/9005843/interactively-enter-headline-under-which-to-place-an-entry-using-capture/24787118#24787118 for where I stole most of this
;; Searches for the current kill-ring head and adds the text under it.
;; If kill ring head is not found it creates it at the bottom of the file.
;; Used with pers-mode it files comments under Org-link pointing to the location of the page you have been visiting
#+BEGIN_SRC emacs-lisp
(defun dont-dup-headline ()
  (let* ((org-refile-targets '((nil :maxlevel . 9)))
         (hd (eval (current-kill 0))))
    (goto-char (point-min))
    (outline-next-heading)
    (if (re-search-forward
         (format org-complex-heading-regexp-format (regexp-quote hd))
         nil t)
        (goto-char (point-at-bol))
      (goto-char (point-max))
      (or (bolp) (insert "\n"))
      (insert "* " hd "\n")))
    (end-of-line))

#+END_SRC

I add my org-protocol captures here.
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
  (append org-capture-templates '(
                                   ("p" "Org-Protocol")
                                   ("po" "org-protocol" entry (file "~/.org/todo/to_file.org")
                                    "* Review %c\n:PROPERTIES:\n:ID: %(org-id-uuid)\n:CAPTURED:\s%U\n:END:\n" :immediate-finish t)
                                   ("pc" "org-protocol-to-clocked" entry (clock)
                                    "* Review %c\n:PROPERTIES:\n:ID: %(org-id-uuid)\n:CAPTURED:\s%U\n:END:\n" :immediate-finish t)
                                   ("pG" "Guides and Manuals (AUTO)" plain (file+function "~/.org/work/library/guides.org" dont-dup-headline)
                                    "Captured: %U\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n" :immediate-finish t :empty-lines 1)
                                   ("pB" "Best Practices (AUTO)" plain (file+function "~/.org/work/library/b_practices.org" dont-dup-headline)
                                    "Captured: %U\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n" :immediate-finish t :empty-lines 1)
                                   ("pT" "Tools (AUTO)" plain (file+function "~/.org/work/library/tools.org" dont-dup-headline)
                                    "Captured: %U\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n" :immediate-finish t :empty-lines 1)
                                   ("pL" "Lessons Learned (AUTO)" plain (file+function "~/.org/work/library/lessons.org" dont-dup-headline)
                                    "Captured: %U\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n" :immediate-finish t :empty-lines 1)
                                   ("pO" "Organizations (AUTO)" plain (file+function "~/.org/work/library/orgs.org" dont-dup-headline)
                                    "Captured: %U\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n" :immediate-finish t :empty-lines 1)
                                   ("pP" "Projects (AUTO)" plain (file+function "~/.org/work/library/projects.org" dont-dup-headline)
                                    "Captured: %U\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n" :immediate-finish t :empty-lines 1)
                                   ("pN" "Notes (AUTO)" plain (file+function "~/.org/work/library/notes.org" dont-dup-headline)
                                    "Captured: %U\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n" :immediate-finish t :empty-lines 1))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
    (append org-capture-templates '(
                                    ("@" "Contacts" entry (file "~/.s2e/contacts.org")
                                     "* %(org-contacts-template-name)
:PROPERTIES:
:EMAIL: %(org-contacts-template-email)
:PHONE:
:ALIAS:
:NICKNAME:
:IGNORE:
:ICON:
:NOTE:
:ADDRESS:
:BIRTHDAY:
:FROM_TAGS:
:TO_TAGS:
:END:"))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
    (append org-capture-templates '(
                                      ("Q" "TEST-respond" entry (file "~/.org/todo/to_file.org")
                                       "* NEXT [[notmuch:id:%:message-id][Respond to %:from on %:subject]]\nSCHEDULED: %t\n%U\n" :clock-in t :clock-resume t :immediate-finish t))))
#+END_SRC

** References
- http://juanreyero.com/article/emacs/org-teams.html
* Refile

Targets include this file and any file contributing to the agenda - up to 3 levels deep
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets (quote ((nil :maxlevel . 4)
                                 (org-agenda-files :maxlevel . 4))))
#+END_SRC

Allow refile to create parent tasks with confirmation
#+BEGIN_SRC emacs-lisp
(setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC

Targets complete in steps so we start with filename, TAB shows the next level of targets etc
#+BEGIN_SRC emacs-lisp
(setq org-outline-path-complete-in-steps t)
#+END_SRC

Dont give me DONE tasks as targets for refiling

#+BEGIN_SRC emacs-lisp
(defun org-init/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'org-init/verify-refile-target)
#+END_SRC

* Display
Font-lock-mode will colorize/fontify text as I type it.
This is great for showing TODO items immediately as I type them out.
#+BEGIN_SRC emacs-lisp
(global-font-lock-mode 1)
#+END_SRC

** Bullets Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** Inline images

When you see an image link, make it the image.
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'iimage-mode-image-regex-alist
  ;;              (cons (concat "\\[\\[file:\\(~?" iimage-mode-image-filename-regex
  ;;                            "\\)\\]") 1))
#+END_SRC


Enable iimage-mode every time an org-mode file is opened
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'org-mode-hook
  ;;           (lambda ()
  ;;             (iimage-mode)))
#+END_SRC

Enable toggle in case it does not work.
#+BEGIN_SRC emacs-lisp
  ;; (defun org-toggle-iimage-in-org ()
  ;;   "display images in your org file"
  ;;   (interactive)
  ;;   (if (face-underline-p 'org-link)
  ;;       (set-face-underline-p 'org-link nil)
  ;;     (set-face-underline-p 'org-link t))
  ;;   (iimage-mode))
#+END_SRC

* Searching & Viewing
** Agenda
*** Keybindings for Agenda Mode
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

*** Agenda Files
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (quote ("~/.org/todo"
                                 "~/.org/personal/"
                                 "~/.org/work/library")))
#+END_SRC
*** Basic Settings
#+BEGIN_SRC emacs-lisp
;;Start with the agenda log ON
(setq org-agenda-show-log t)

;; Set the agenda to skip scheduled items if they are done
(setq org-agenda-skip-scheduled-if-done t)

;; Set the agenda to skip deadlines if they are done
(setq org-agenda-skip-deadline-if-done t)
#+END_SRC
*** Agenda todo item configuration
#+BEGIN_SRC emacs-lisp
;; Keep tasks with dates on the global todo lists
(setq org-agenda-todo-ignore-with-date nil)

;; Keep tasks with deadlines on the global todo lists
(setq org-agenda-todo-ignore-deadlines nil)

;; Keep tasks with scheduled dates on the global todo lists
(setq org-agenda-todo-ignore-scheduled nil)

;; Keep tasks with timestamps on the global todo lists
(setq org-agenda-todo-ignore-timestamp nil)

;; Remove completed deadline tasks from the agenda view
(setq org-agenda-skip-deadline-if-done t)

;; Remove completed scheduled tasks from the agenda view
(setq org-agenda-skip-scheduled-if-done t)

;; Remove completed items from search results
(setq org-agenda-skip-timestamp-if-done t)
#+END_SRC

*** Display

**** Always hilight the current agenda line
#+BEGIN_SRC emacs-lisp
(add-hook 'org-agenda-mode-hook
          '(lambda () (hl-line-mode 1))
          'append)
#+END_SRC

**** Time Grid
#+BEGIN_SRC emacs-lisp
;;Set time grid ON for day
(setq org-agenda-use-time-grid t)

;; Set time grid times (show always on day even if no tasks set.)
(setq org-agenda-time-grid
      '((daily today)
       "----------------"
       (600 800 1000 1200 1400 1600 1800 2000)))
#+END_SRC

**** Custom clock faces
#+BEGIN_SRC emacs-lisp
;; The following custom-set-faces create the highlights
(custom-set-faces
 '(org-mode-line-clock ((t (:background "grey75" :foreground "red" :box (:line-width -1 :style released-button)))) t))
#+END_SRC

*** [[http://orgmode.org/worg/agenda-optimization.html][Speed up agenda mode]]
#+BEGIN_SRC emacs-lisp
;; Inhibit agenda files startup options (Org > 8.0)
;; http://orgmode.org/worg/agenda-optimization.html#sec-4
(setq org-agenda-inhibit-startup t)

;; Do not dim blocked tasks
(setq org-agenda-dim-blocked-tasks nil)
#+END_SRC

*** Custom agenda commands
#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      (quote (("ts"
               "TODAY's SHORT"
               ((tags "CORE_TASK=\"true\"+LEVEL=1"
                      ((org-agenda-overriding-header "Core Clocking Tasks")))
                (agenda ""
                ((org-agenda-ndays 1)
                 (org-agenda-log-mode-items '(clock closed))
                 (org-agenda-entry-types '())))
                nil))
              ("tl"
               "TODAY's LOG"
               ((tags "CORE_TASK=\"true\"+LEVEL=1"
                      ((org-agenda-overriding-header "Core Clocking Tasks")))
                (agenda ""
                ((org-agenda-ndays 1)
                 (org-agenda-show-log t)
                 (org-agenda-log-mode-items '(clock closed))
                 (org-agenda-entry-types '())))
                nil))
              ("ta"
               "TODAY's Question"
               ((tags "CORE_TASK=\"true\"+LEVEL=1"
                      ((org-agenda-overriding-header "Core Clocking Tasks")))
                (agenda ""
                        ((org-agenda-ndays 1)
                         (org-agenda-show-log t)
                         (org-agenda-log-mode-items '(clock closed))
                         (org-agenda-skip-function
                          '(org-agenda-skip-entry-if 'todo '("CANCELED" "SOMEDAY")))))
                nil))
              ("wa"
               "This Weeks's ALL TASKS"
               ((tags "CORE_TASK=\"true\"+LEVEL=1"
                      ((org-agenda-overriding-header "Core Clocking Tasks")))
                (tags "+SCHEDULED>=\"<+1w>\"TODO=\"TODO\"|+DEADLINE>=\"<+1w>\"+TODO=\"TODO\""
                      ((org-agenda-overriding-header "Upcoming tasks")))
                (agenda ""
                ((org-agenda-ndays 7)
                 (org-agenda-log-mode-items '(clock closed))))
                nil))
              ("wl"
               "This Weeks's LOGS"
               ((tags "CORE_TASK=\"true\"+LEVEL=1"
                      ((org-agenda-overriding-header "Core Clocking Tasks")))
                (agenda ""
                ((org-agenda-ndays 7)
                 (org-agenda-show-log t)
                 (org-agenda-log-mode-items '(clock closed))
                 (org-agenda-entry-types '())))
                nil)))))


#+END_SRC

** [[http://orgmode.org/w/?p=org-mode.git;a=blob_plain;f=contrib/lisp/org-registry.el;hb=HEAD][Org-Registry]]
This currently breaks when it tries to load the directors defined by org-mode as files.
#+BEGIN_SRC emacs-lisp
;(require 'org-registry)
;(org-registry-initialize)
#+END_SRC

* Notification

I have disabled this snippet until I am ready to implement it. But, one day in the future.
#+BEGIN_SRC emacs-lisp
;;  (require 'org-notify)
;;  (org-notify-start)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (org-notify-add 'appt
  ;;                 '(:time "-1s"
  ;;                         :period "5s"
  ;;                         :duration 10
  ;;                         :actions (-message -ding))
  ;;                 '(:time "15m"
  ;;                         :period "2m"
  ;;                         :duration 100
  ;;                         :actions -notify -ding)
  ;;                 '(:time "2h"
  ;;                         :period "5m"
  ;;                         :actions -message)
  ;;                 '(:time "3d"
  ;;                         :actions -email))

  ;; (org-notify-add 'flight
  ;;                 '(:time "5h"
  ;;                         :actions -email)
  ;;                 '(:time "1d"
  ;;                         :actions -email)
  ;;                 '(:time "3d"
  ;;                         :actions -email))
#+END_SRC

* Text Manipulation

** Don't allow me to edit invisible text
#+BEGIN_SRC emacs-lisp
(setq org-catch-invisible-edits 'error)
#+END_SRC

** Allow sub-tasks to block tasks above it.
I actually really hate this. But it forces me to address tasks below an item to identify old TODO's I will never do.
#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)
#+END_SRC
* Security

I use gpg encryption to secure my org-notes

#+BEGIN_SRC emacs-lisp
(require 'epa-file)
(epa-file-enable)

(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
#+END_SRC

* Linking and Bookmarking

** Linking
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
#+END_SRC

*** Link to custom ID, not to file location
#+BEGIN_SRC emacs-lisp
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
#+END_SRC

** Bookmarks with firefox
http://orgmode.org/worg/org-contrib/org-protocol.html

#+BEGIN_SRC emacs-lisp
(require 'org-protocol)

#+END_SRC

* Time CLocking

** Clock settings
#+BEGIN_SRC emacs-lisp
;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)
;; Show lot of clocking history so it's easy to pick items off the C-F11 list
(setq org-clock-history-length 23)
;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)
;; Change tasks to NEXT when clocking in
(setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)
;; Do not prompt to resume an active clock
(setq org-clock-persist-query-resume nil)
;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)
#+END_SRC

** Clocking Functions
#+BEGIN_SRC emacs-lisp
(setq bh/keep-clock-running nil)

(defvar bh/organization-task-id "NONE")

(defun bh/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))

(defun bh/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun bh/clock-in-to-next (kw)
  "Switch a task from TODO to NEXT when clocking in.
Skips capture tasks, projects, and subprojects.
Switch projects and subprojects from NEXT back to TODO"
  (when (not (and (boundp 'org-capture-mode) org-capture-mode))
    (cond
     ((and (member (org-get-todo-state) (list "TODO"))
           (bh/is-task-p))
      "NEXT")
     ((and (member (org-get-todo-state) (list "NEXT"))
           (bh/is-project-p))
      "TODO"))))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/punch-in (arg)
  "Start continuous clocking and set the default task to the
selected task.  If no task is selected set the Organization task
as the default task."
  (interactive "p")
  (setq bh/keep-clock-running t)
  (if (equal major-mode 'org-agenda-mode)
      ;;
      ;; We're in the agenda
      ;;
      (let* ((marker (org-get-at-bol 'org-hd-marker))
             (tags (org-with-point-at marker (org-get-tags-at))))
        (if (and (eq arg 4) tags)
            (org-agenda-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))
    ;;
    ;; We are not in the agenda
    ;;
    (save-restriction
      (widen)
      ; Find the tags on the current task
      (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
          (org-clock-in '(16))
        (bh/clock-in-organization-task-as-default)))))

(defun bh/punch-out ()
  (interactive)
  (setq bh/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  (org-agenda-remove-restriction-lock))

(defun bh/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))

(defun bh/clock-in-parent-task ()
  "Move point to the parent (project) task if any and clock in"
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (not parent-task) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (if parent-task
            (org-with-point-at parent-task
              (org-clock-in))
          (when bh/keep-clock-running
            (bh/clock-in-default-task)))))))

(defun bh/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find bh/organization-task-id 'marker)
    (org-clock-in '(16))))

(defun bh/clock-out-maybe ()
  (when (and bh/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (bh/clock-in-parent-task)))

(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

(require 'org-id)
(defun bh/clock-in-task-by-id (id)
  "Clock in a task by id"
  (org-with-point-at (org-id-find id 'marker)
    (org-clock-in nil)))

(defun bh/clock-in-last-task (arg)
  "Clock in the interrupted task if there is one
Skip the default task and get the next one.
A prefix arg forces clock in of the default task."
  (interactive "p")
  (let ((clock-in-to-task
         (cond
          ((eq arg 4) org-clock-default-task)
          ((and (org-clock-is-active)
                (equal org-clock-default-task (cadr org-clock-history)))
           (caddr org-clock-history))
          ((org-clock-is-active) (cadr org-clock-history))
          ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
          (t (car org-clock-history)))))
    (widen)
    (org-with-point-at clock-in-to-task
      (org-clock-in nil))))

#+END_SRC

** Clock Keys
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f9> I") 'bh/punch-in)
(global-set-key (kbd "<f9> O") 'bh/punch-out)
#+END_SRC
* Exporting

#+BEGIN_SRC emacs-lisp
(setq org-odt-content-template-file "~/.dotfiles/templates/emacs/OrgOdtContentTemplate.xml")
#+END_SRC

Sadly most people use Microsoft Word. So, I just export my .odt files as .doc files.
#+BEGIN_SRC emacs-lisp
(setq org-odt-preferred-output-format "doc")
#+END_SRC

* Babel

** Set acceptable languages (whatever I want Babel, whatever I want.)

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
  '((sh               . t)
    (js                . t)
    (emacs-lisp . t)
    (ditaa           . t)
    (gnuplot    . t)
    (C          . t)
    (latex     . t)
    (makefile   . t)
    (sql        . t)
    (sqlite     . t)
    (scala      . t)
    (org        . t)
    (python     . t)
    (dot        . t)
    (css        . t)))
#+END_SRC

** Make code-blocks pretty

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
  (setq org-src-fontify-natively t)
#+END_SRC

** [[http://eschulte.github.io/org-docco/org-docco.html][Org-Doco]] to make my tangled code pretty
*** TODO Org-Doco does not currently allow headlines. So, I will have to modify it to do that before I can use it.
http://orgmode.org/w/?p=org-mode.git;a=blob_plain;f=contrib/scripts/org-docco.org;hb=HEAD

* Technical Artifacts

  Make sure that we can simply =require= this library.

#+BEGIN_SRC emacs-lisp
  (provide 'init-emacs-org)
#+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: Controls my org-mode based emacs-configurations.
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs.d/elisp/emacs-org.org
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
