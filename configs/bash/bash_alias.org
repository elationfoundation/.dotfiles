#+TITLE: Bash_alias
#+AUTHOR: seamus tuohy
#+EMAIL: s2e@seamustuohy.com
#+DATE: 2015 Apr 18
#+TAGS: bash alias

* Networking
** Diagnostics

Show the TCP and UDP ports being listened on with the process associated, user, etc.
#+BEGIN_SRC sh
alias lport="sudo netstat -lepunt"
#+END_SRC
...fix empty...

** Simple Servers

run simple python server from directory

#+BEGIN_SRC sh
alias simpleServer="python -m SimpleHTTPServer"
#+END_SRC
...fix empty...

Use simple python server to view jekyll site from _all directory. Useful for when you use SVG's as much as I do.
#+BEGIN_SRC sh
alias jserver="cd ..; jekyll --no-server; cd _site; simpleServer"
#+END_SRC
...fix empty...

** Connecting to other devices
OpenWRT easy ssh and scp node Alias's
#+BEGIN_SRC sh
alias oscp='scp -o "UserKnownHostsFile /dev/null" -o "StrictHostKeyChecking no"'
alias ossh='ssh -o "UserKnownHostsFile /dev/null" -o "StrictHostKeyChecking no"'
#+END_SRC

** Screen into BeagleBone Black with a console cable
#+BEGIN_SRC sh
alias bbscreen="sudo screen /dev/ttyUSB0 115200"
#+END_SRC

* Scraping

#+BEGIN_SRC sh
alias listserv='time ~/.bin/get_listserv'
#+END_SRC
...fix empty...

* Terminal and Navigation
Alias' for easier navigation
#+BEGIN_SRC sh
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias cd=cd_func
#+END_SRC

cd function for providing easy movement and history.

#+BEGIN_SRC sh
cd_func ()
{
  local x2 the_new_dir adir index
  local -i cnt

  if [[ $1 ==  "--" ]]; then
    dirs -v
    return 0
  fi

  the_new_dir=$1
  [[ -z $1 ]] && the_new_dir=$HOME

  if [[ ${the_new_dir:0:1} == '-' ]]; then
    #
    # Extract dir N from dirs
    index=${the_new_dir:1}
    [[ -z $index ]] && index=1
    adir=$(dirs +$index)
    [[ -z $adir ]] && return 1
    the_new_dir=$adir
  fi

  # '~' has to be substituted by ${HOME}
  [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

  # Now change to the new dir and add to the top of the stack
  pushd "${the_new_dir}" > /dev/null
  [[ $? -ne 0 ]] && return 1
  the_new_dir=$(pwd)

  # Trim down everything beyond 11th entry
  popd -n +11 2>/dev/null 1>/dev/null

  # Remove any other occurence of this dir, skipping the top of the stack
  for ((cnt=1; cnt <= 10; cnt++)); do
    x2=$(dirs +${cnt} 2>/dev/null)
    [[ $? -ne 0 ]] && return 0
    [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
    if [[ "${x2}" == "${the_new_dir}" ]]; then
      popd -n +$cnt 2>/dev/null 1>/dev/null
      cnt=cnt-1
    fi
  done

  return 0
}
#+END_SRC
...fix empty...

** Colorize Terminal
Colorize Logs
#+BEGIN_SRC sh
if [ -f "/usr/bin/ccze" ]; then
    lesslog() { ccze -A < $1 | less -R; }
    taillog() { tail -f $1 | ccze -A; }
fi
#+END_SRC

Colorize Less

#+BEGIN_SRC sh
alias lesc='LESS="-R" LESSOPEN="|pygmentize -g %s" less'
#+END_SRC


* Pranks & Misc

#+BEGIN_SRC sh
alias rainbow='for i in {1..665535};do printf "%x\n" $i;done|while read -r u;do printf "\033[38;5;$((16+$((16#$u))%230))m\u$u\033[0m";done'
#+END_SRC
...fix empty...

#+BEGIN_SRC sh
whitenoise() { aplay -c 2 -f S16_LE -r 44100 /dev/urandom ;}
#+END_SRC
...fix empty...

* Coding

#+BEGIN_SRC sh
alias g=git
function gg() {
   local _gg="$1";
   shift;
   git --git-dir="${_gg}/.git" --work-tree="${_gg}" "$@"
}
#+END_SRC
...fix empty...

* Utilities
** Installed
find installed files (good for grepping for dependencies. "installed |grep DEPEN")
#+BEGIN_SRC sh
alias installed='dpkg --get-selections | grep -v deinstall'
#+END_SRC
...fix empty...

** Alert
Add an "alert" alias for long running commands.  Use like so: sleep 10; alert
#+BEGIN_SRC sh
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
#+END_SRC
...fix empty...

** Hide mistaken history commands
# Hide the previous command you just ran and forgot to use space.
#+BEGIN_SRC sh
alias hideprev='history -d $((HISTCMD-2)) && history -d $((HISTCMD-1))'
#+END_SRC
...fix empty...

** Un-delete File

#+BEGIN_SRC sh
undel_func(){
        echo "Searching for deleted file with string $1"
        # *"Attempt"* to recover an accidentally removed file.
        sudo fgrep --binary-files=text -C 2000 "$1" /dev/sda > recovereddata.out
}
#+END_SRC
...fix empty...

#+BEGIN_SRC sh
alias undelete=undel_func
#+END_SRC
...fix empty...

#+BEGIN_SRC sh
  undel_media() {
      #sudo foremost -i /dev/sdd1 -o ~/temp/media
      sudo foremost -i $1 -o $2
      sudo chown -R s2e $2
      cd $2/mp4
      # Repair all mp4's found
      find . |grep xargs -I % ffmpg -i % -o %.new.mp4
      # TODO - Run repair function on all media
  }

#+END_SRC

** DD-Status

Get the status of a currently running dd process
Use in a terminal NOT running the current dd!
Usage: ddstat

#+BEGIN_SRC sh
alias ddstat="sudo kill -USR1 `pgrep -l '^dd$' | cut -f 1 -d \" \"`"
#+END_SRC
...fix empty...

** Burn USB with alert

#+BEGIN_SRC sh
burnusb() {
        sudo dd if=$1 of=$2 bs=4M conv=sync
        sync
        ding
        notify-send -u critical 'burnusb' 'done'
}
#+END_SRC
...fix empty...

** Extract a compressed file
#+BEGIN_SRC sh
    extract() {
            if [ -f $1 ] ; then
                    case $1 in
                            ,*.tar.bz2) tar xvjf $1 ;;
                            ,*.tar.gz) tar xvzf $1 ;;
                            ,*.tar.xz) tar xvJf $1 ;;
                            ,*.xz) unxz -v $1 ;;
                            ,*.bz2) bunzip2 $1 ;;
                            ,*.rar) unrar x $1 ;;
                            ,*.gz) gunzip $1 ;;
                            ,*.tar) tar xvf $1 ;;
                            ,*.tbz2) tar xvjf $1 ;;
                            ,*.tgz) tar xvzf $1 ;;
                            ,*.zip) unzip $1 ;;
                            ,*.Z) uncompress $1;;
                            ,*.7z) 7z x $1 ;;
                            ,*) echo "'$1' cannot be extracted via >extract<" ;;
                    esac
            else
                    echo "'$1' is not a valid file"
            fi
    }
#+END_SRC
...fix empty...

** Grab a compressed file from online and uncompress it
#+BEGIN_SRC sh
curltar() {
        case $1 in
                *.tar.bz2) \curl -kL $1 | tar xvjf - ;;
                *.tar.gz) \curl -kL $1 | tar xvzf - ;;
                *.bz2) \curl -kL $1 | bunzip2 - ;;
                *.rar) \curl -kL $1 | unrar x - ;;
                *.gz) \curl -kL $1 | gunzip - ;;
                *.tar) \curl -kL $1 | tar xvf - ;;
                *.tbz2) \curl -kL $1 | tar xvjf - ;;
                *.tgz) \curl -kL $1 | tar xvzf - ;;
                *.zip) \curl -kL $1 | unzip - ;;
                *.Z) \curl -kL $1 | uncompress - ;;
                *.7z) \curl -kL $1 | 7z x - ;;
                *) \curl -kLO $1
        esac
}
#+END_SRC
...fix empty...

** Git Branch Parsing
#+BEGIN_SRC sh
function parse_git_branch() {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1) /'
}
#+END_SRC
...fix empty...

** Git purge file
Use filter-branch to remove an unwanted file/directory from a repo's git revision history.

#+BEGIN_SRC sh
git_purge() {
git filter-branch --prune-empty --index-filter "git rm -rf --cached --ignore-unmatch ${1}" --tag-name-filter cat -- --all
}

git_fpurge() {
git filter-branch -f --prune-empty --index-filter "git rm -rf --cached --ignore-unmatch ${1}" --tag-name-filter cat -- --all
}

#+END_SRC
** Crontab

#+BEGIN_SRC sh

  crontab_add() {
      (crontab -l ; echo "$1") 2>&1 \
          | grep -v "no crontab" \
          | sort | uniq \
          | crontab -
  }

  crontab_delete() {
      (crontab -l ; echo "$1") 2>&1 \
          | grep -v "no crontab" \
          | grep -v $1 \
          |  sort | uniq \
          | crontab -
  }


#+END_SRC

...fix empty...

** Backup

Backup my un-encrypted files to another encrypted medium.

#+BEGIN_SRC sh
  backup() {
    # backup mobile home data
      duplicity  -v 9 \
          --encrypt-key=B6193EC73CF07AA7 \
          "${MOBILE_HOME}" \
          file:///media/s2e/Backup/mobile_home

    # backup home directory data
      duplicity  -v 9 \
          --encrypt-key=B6193EC73CF07AA7 \
          /home/s2e/ \
          file:///media/s2e/Backup/home_dir
  }
#+END_SRC

** Find item in a Bash config file

#+BEGIN_SRC sh
# Look for relevant string in bash config files when things go weird
# $ grep_bash PATH
grep_bash(){
  for f in  ~/.bashrc ~/.profile ~/.bash_profile ~/.bash_login \
            /etc/profile /etc/environment /etc/bash.bashrc;
  do
    [ -e $f ] && grep -H "$@" $f;
  done
}
#+END_SRC

** Latex

Requires libcanberra-gtk-dev

> sudo apt-get install libcanberra-gtk-dev

Add the following latex to your document to use

#+BEGIN_QUOTE
\begin{center}
    \centering
    \def\svgwidth{\columnwidth}
    \input{skills_FLM.pdf_tex}
\end{center}
#+END_QUOTE

#+BEGIN_SRC sh
  inkscape2latex() {
      inkscape -D -z --file=${1}.svg --export-pdf=${1}.pdf --export-latex
  }
#+END_SRC

** Identify what process (including its children) is eating up all my memory
#+BEGIN_SRC sh
  alias psmem="sudo python ~/.dotfiles/bin/helpers/ps_mem.py"
#+END_SRC

** github stats

#+BEGIN_SRC sh
  gitstats() {
      local user="$1"
    python ~/.dotfiles/bin/scrape/github_traffic.py --log --user "${user}" --write ~/temp/github
  }

#+END_SRC

* Technical Section
This file originally came from an [[http://orgmode.org][org-mode]] file.
Create the script by tangling it with: =C-c C-v t=

#+PROPERTY: tangle ~/.bin/bash_alias
#+PROPERTY: comments org
#+PROPERTY: shebang #!/usr/bin/env bash
#+DESCRIPTION: My bash alias'
