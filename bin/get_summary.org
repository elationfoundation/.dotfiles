#+TITLE: Get_summary
#+AUTHOR: seamus tuohy
#+EMAIL: s2e@seamustuohy.com
#+DATE: 2015 Apr 18
#+TAGS: python nlp summary

* Packages Used

As taken from the [[https://github.com/miso-belica/sumy#python-api][Sumy api page.]]
#+BEGIN_SRC python
from __future__ import absolute_import
from __future__ import division, print_function, unicode_literals

from sumy.parsers.html import HtmlParser
from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.lsa import LsaSummarizer as Summarizer
from sumy.nlp.stemmers import Stemmer
from sumy.utils import get_stop_words
#+END_SRC

Scraping
#+BEGIN_SRC python
from bs4 import BeautifulSoup
from urllib import urlopen
#+END_SRC

Needed for the google api
#+BEGIN_SRC python
from apiclient.discovery import build
#+END_SRC

Needed for command line functionality
#+BEGIN_SRC python
import sys
import argparse
from getpass import getpass
#+END_SRC

* Scraping

#+BEGIN_SRC python
  def get_url(url):
      url_obj = urlopen(url).read()
      print(url)
      html = BeautifulSoup(url_obj)
      print(html)
      raw = html.get_text()
      return raw
#+END_SRC

#+BEGIN_SRC python
  def get_plain_text(text_file):
      with open(text_file, 'r') as f:
          read_data = f.read()
      return read_data
#+END_SRC

* Summation

#+BEGIN_SRC python
  def summarize(text, language, count):
      """
      text (str):
      language (str):
      count (int):
      """
      summary = []
      text_file = text
      parser = PlaintextParser.from_string(text, Tokenizer(language))
      stemmer = Stemmer(langauge)
      # or for plain text files
      summarizer = Summarizer(stemmer)
      summarizer.stop_words = get_stop_words(language)

      for sentence in summarizer(parser.document, count):
          summary.append(sentence)
      return summary
#+END_SRC

* Translation
#+BEGIN_SRC python
  def get_source_lang(summary):
      """
      TODO
      Returns a tuple with the two letter name of the language used and the full name of the tokenizer to use.
      """
      #TODO THIS
      return ('fr', "french")
#+END_SRC

#+BEGIN_SRC python
  def translate(summary, developer_key, source_lang):
  # Build a service object for interacting with the API. Visit
  # the Google APIs Console <http://code.google.com/apis/console>
  # to get an API key for your own application.
      service = build('translate', 'v2', developerKey=developer_key)
      #get current language
      source_lang = get_source_lang(summary)
      translated = service.translations().list(
          source=source_lang,
          target='en',
          q=summary
      ).execute()
      return translated

#+END_SRC

* Command Line

#+BEGIN_SRC python
  def get_api_key():
        api_key = getpass("Enter your API key for Google Translate:")
        return api_key
#+END_SRC

#+BEGIN_SRC python
  def parse_arguments():
      arg_p = argparse.ArgumentParser("Get a summary of some text")
      arg_p.add_argument("-u", "--url", type=str, help="A url to parse.")
      arg_p.add_argument("-i", "--input-file", type=file, help="A file containing plain text to parse")
      args = arg_p.parse_args()
      return args
#+END_SRC

#+BEGIN_SRC python
  def usage():
      print("get_summary [-i <file> | -u <url> ] ")
#+END_SRC

* Main
#+BEGIN_SRC python
  def main():
      #api_key = get_api_key()
      args = parse_arguments()
      if args.url:
          text = get_url(args.url)
      elif args.input_file:
          text = get_plain_text(args.input_file)
      else:
          usage()
          sys.exit(64)
      #lang = get_lang(text)
      # TODO implement google translate API
      lang = 'en'
      count = '10'
      summary = summarize(text, lang, count)
      #translated = translate(summary, dev_key, lang)
      #keywords = check_keywords(translated)
      print(summary)

  if __name__ == "__main__":
      main()
#+END_SRC

* References

** Translation
- https://developers.google.com/api-client-library/python/apis/translate/v2
- https://developers.google.com/resources/api-libraries/documentation/translate/v2/python/latest/index.html
- https://developers.google.com/resources/api-libraries/documentation/translate/v2/python/latest/translate_v2.translations.html
- https://developers.google.com/api-client-library/python/
- https://code.google.com/p/google-api-python-client/source/browse/samples/translate/main.py

** Text Summation
- https://pypi.python.org/pypi/sumy
- https://github.com/miso-belica/sumy/tree/dev

* Technical Section
This file originally came from an [[http://orgmode.org][org-mode]] file.
Create the script by tangling it with: =C-c C-v t=

#+PROPERTY: tangle ~/.bin/get_summary
#+PROPERTY: comments org
#+PROPERTY: shebang #!/usr/bin/env python
#+DESCRIPTION: Collects a set of summary sentences of a piece of text translated into english.
