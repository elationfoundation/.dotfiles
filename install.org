#+TITLE: Install
#+AUTHOR: seamus tuohy
#+EMAIL: s2e@seamustuohy.com
#+DATE: 2015 Apr 18
#+TAGS: org emacs install build bash

* Setup

Bash should terminate in case a command or chain of command finishes with a non-zero exit status.
Terminate the script in case an uninitialized variable is accessed.
See: https://github.com/azet/community_bash_style_guide#style-conventions

#+BEGIN_SRC sh
#set -e
#set -u
set -x
#+END_SRC

* Readonly Variables
NONE
* Global Variables
#+BEGIN_SRC sh
  readonly resource_dir=~/.emacs.d/resources
  readonly elisp_dir=~/.emacs.d/elisp
  readonly cache_dir=~/.emacs.d/cache
  readonly emacs_package_dir=~/.emacs.d/packages
  readonly prog_name=$(basename $0)
  readonly prog_dir=$(readlink -m $(dirname $0))
  readonly setup_dir=/tmp/setup
#+END_SRC

* Installation


** Master Installer

#+BEGIN_SRC sh
    install_emacs_deps() {
        #install_thesaurus
        install_write_good
        install_guru_mode
        install_cask
        install_code_checkers
        install_calfw
        install_orgcaldav
        install_org-bullets
        install_sumy
        install_notmuch
        install_offlineimap
        install_twittering
        install_org_notmuch_clocking
        install_string_utils
        install_cv
        install_pycal
        install_pygments
        install_ectags
        type truecrypt || install_truecrypt
    }
#+END_SRC

** Install Pygments
#+BEGIN_SRC sh
    install_pygments() {
        sudo pip install Pygments
  }
#+END_SRC

** Debian Software and Dependencies

#+BEGIN_SRC sh
  install_package_deps() {

      sudo apt-get -y install \
          zip \
          unzip \
          tree \
          vim \
          wget \
          time \
          python-dev \
          python3-dev \
          python-pip \
          python3-pip \
          sqlite3 \
          pylint \
          gnutls-bin \
          offlineimap \
          python-notmuch \
          python-bs4 \
          libncurses5-dev \
          silversearcher-ag \
          duplicity \
          keepass2 \
          terminator \
          pidgin-otr \
          pidgin \
          git \
          sudo \
          libxapian-dev \
          libgmime-2.6-dev \
          libtalloc-dev \
          zlib1g-dev \
          python-sphinx
    # Conkeror Installation
      install_conkeror
  }
#+END_SRC

** Truecrypt
#+BEGIN_SRC sh
  install_truecrypt() {
      local truecrypt_64_bin='https://github.com/AuditProject/truecrypt-verified-mirror/blob/master/Linux/truecrypt-7.1a-linux-x64.tar.gz?raw=true'
      local tc_gz_name=truecrypt-7.1a-linux-x64.tar.gz
      local tmpdir=$(mktemp -dt "$(basename "$0").XXXXX")
      wget --output-document="$tmpdir"/"{tc_gz_name}" "${truecrypt_64_bin}"

      # Verify that it is the correct key.
      gpg --import ~/.dotfiles/checks/truecrypt/TrueCrypt-Foundation-Public-Key.asc

      gpg --verify ~/.dotfiles/checks/truecrypt/truecrypt-7.1a-linux-x64.tar.gz.sig \ "$tmpdir"/"{tc_gz_name}"
      local status=$?
      # If it is not the right key, then we exit.
      if [ $status -ne 0 ]; then
          echo "The truecrypt binary downloaded is not properly signed. Do not continue unless you get an authentic version." >&2
          exit 1
      else
          cd "${tmpdir}"
          tar xvzf "{tc_gz_name}"
          sudo ./truecrypt-7.1a-setup-x64
      fi
  }
#+END_SRC

** Thesarus
Check for a thesaurus and if it does not exist install it.
#+BEGIN_SRC sh
install_thesaurus() {
    #Check for & get thesaurus if missing
    local thes_name=mthes10.txt
    local zip_name=mthes10.zip
    local url=ftp://ibiblio.org/pub/docs/books/gutenberg/etext02/mthes10.zip
    if [[ ! -e $resource_dir/$thes_name ]]; then
        local tmpdir=$(mktemp -dt "$(basename "$0").XXXXX")
        wget --output-document="$tmpdir"/$zip_name "$url"
        unzip "$tmpdir"/mthes10.zip -d $resource_dir/$thes_name
    fi

    #Check for & get synonym.el if missing
    local syn_file="$emacs_package_dir"/synonyms/synonyms.el
    local syn_el_url=http://www.emacswiki.org/emacs/download/synonyms.el
    if [[ ! -e $syn_file ]]; then
        mkdir --parents "$emacs_package_dir"/synonyms/
        wget --output-document=$syn_file "$syn_el_url"
    fi
}
#+END_SRC

** Write Good
#+BEGIN_SRC sh
  install_write_good() {
      get_git_package "$emacs_package_dir"/writegood-mode https://github.com/bnbeckwith/writegood-mode.git
  }
#+END_SRC

** Install Notmuch
#+BEGIN_SRC sh
  install_notmuch() {
      local BUILD_DIRECTORY=$(mktemp -d)
      get_git_package "$BUILD_DIRECTORY"/notmuch git://notmuchmail.org/git/notmuch
      cd "$BUILD_DIRECTORY"/notmuch
      ./configure
      make
      sudo make install
  }
#+END_SRC

** calfw
#+BEGIN_SRC sh
  install_calfw() {
      get_git_package "$emacs_package_dir"/calfw https://github.com/kiwanami/emacs-calfw.git
  }
#+END_SRC

** org-caldav
#+BEGIN_SRC sh
  install_orgcaldav() {
      get_git_package "$emacs_package_dir"/org-caldav https://github.com/dengste/org-caldav.git
  }
#+END_SRC

** exuberant-ctags
#+BEGIN_SRC sh
  install_ectags() {
    sudo apt-get install exuberant-ctags
  }
#+END_SRC
** ical-event
#+BEGIN_SRC sh
  install_orgcaldav() {
      get_git_package "$emacs_package_dir"/ical-event https://github.com/elationfoundation/ical-event.git
  }
#+END_SRC

** Offline Imap
#+BEGIN_SRC sh
  install_offlineimap() {
      get_git_package "$emacs_package_dir"/offlineimap https://github.com/jd/offlineimap.el.git
  }
#+END_SRC

** Twittering
#+BEGIN_SRC sh
  install_twittering() {
      get_git_package "$emacs_package_dir"/twittering-mode git://github.com/hayamiz/twittering-mode.git
  }

#+END_SRC
** Guru Mode
#+BEGIN_SRC sh
  install_guru_mode() {
      get_git_package "$emacs_package_dir"/guru-mode https://github.com/bbatsov/guru-mode.git
  }
#+END_SRC
** Org Bullets
#+BEGIN_SRC sh
  install_org-bullets() {
      get_git_package "$emacs_package_dir"/org-bullets https://github.com/sabof/org-bullets.git
  }
#+END_SRC

** Cask
#+BEGIN_SRC sh
  install_cask() {
    local tmpdir=$(mktemp -dt "$(basename "$0").XXXXX")
    local cask_dir=~/.cask
    git clone  https://github.com/cask/cask.git "${tmpdir}"
    cd "${tmpdir}"
    python go
    cd ~/.emacs.d
    export PATH="~/.cask/bin:$PATH"
    cask
    cd "${prog_dir}"
  }
#+END_SRC

** Code Checkers
#+BEGIN_SRC sh
  install_code_checkers() {
      sudo pip install flake8
      sudo apt-get -y install shellcheck
  }

#+END_SRC

** Code Tangler
#+BEGIN_SRC sh
  tangle_code() {
  for DIR in ~/.dotfiles/configs/emacs \
                 ~/.dotfiles/bin \
                 ~/.dotfiles/configs/bash \
                 ~/.dotfiles/configs/git \
                 ~/.dotfiles/bin/elisp \
                 ~/.dotfiles/bin/git \
                 ~/.dotfiles/bin/scrape
  do
          tangle $DIR
  done
  }
#+END_SRC

Actual tangling done by this function.

#+BEGIN_SRC sh
  tangle() {
      for file in "$1"/*.org; do
          emacs $file --batch --eval="(org-babel-tangle)"
      done
  }
#+END_SRC

** Sumy
Module for automatic summarization of text documents and HTML pages.
#+BEGIN_SRC sh
  install_sumy() {
      sudo pip install git+git://github.com/miso-belica/sumy.git
  }
#+END_SRC

** org notmuch clocking
#+BEGIN_SRC sh
    install_org_notmuch_clocking() {
      mkdir -p "$emacs_package_dir"/org-notmuch-clocking
      cp ~/.dotfiles/elisp/org-notmuch-clocking.el "$emacs_package_dir"/org-notmuch-clocking/org-notmuch-clocking.el
  }
#+END_SRC
** emacs string utils
#+BEGIN_SRC sh
  install_string_utils() {
      get_git_package "$emacs_package_dir"/string-utils https://github.com/rolandwalker/string-utils.git
  }



#+END_SRC
** CV
[[https://github.com/Xfennec/cv][cv - Coreutils Viewer]]
This tool can be described as a Tiny, Dirty, Linux-and-OSX-Only C command that looks for coreutils basic commands (cp, mv, dd, tar, gzip/gunzip, cat, etc.) currently running on your system and displays the percentage of copied data.
#+BEGIN_SRC sh
  install_cv() {
    local BUILD_DIRECTORY=$(mktemp -d)
    cd "$BUILD_DIRECTORY"
    git clone https://github.com/Xfennec/cv.git
    cd cv
    make
    sudo make install
  }

#+END_SRC

** Python icalendar

#+BEGIN_SRC sh
    install_pycal() {
      sudo pip install icalendar

    }

#+END_SRC
* Utilities
** Git Package Grabber
#+BEGIN_SRC sh
  get_git_package() {
      local package_dir="${1}"
      local repo="${2}"
      if [[ ! -e $package_dir ]]; then
          git clone "$repo"  "$package_dir"
      else # Update to the latest version for good measure.
          git --git-dir="$package_dir"/.git --work-tree="$package_dir"  pull
      fi
  }
#+END_SRC

** Environment Creation

#+BEGIN_SRC sh
create_emacs_paths(){
    mkdir -p "$resource_dir"
    mkdir -p "$cache_dir"
    mkdir -p "$elisp_dir"
}
#+END_SRC

** Links
#+BEGIN_SRC sh
  link_lisp() {
          ln -s  ~/.dotfiles/configs/emacs/Cask ~/.emacs.d/Cask || true
          ln -s ~/.dotfiles/templates/emacs/  ~/.emacs.d/templates || true
          ln -s ~/.dotfiles/snippets ~/.emacs.d/snippets
          ln -s ~/.dotfiles/configs/.mailcap ~/.mailcap
  }
#+END_SRC

** Pip 3 Installs
#+BEGIN_SRC sh
pip3_install() {
    local package="${1}"
    local installed=$(pip3 list \
                             | grep -E "^${package}\s\([0-9\.]*\)$" \
                             | grep -o "${package}")
    if [[ "${installed}" = ""  ]]; then
        echo "Installing ${package} via python pip 3"
        sudo pip3 install "${package}"
        echo "Installation of ${package} completed."
    else
        echo "${package} already installed in pip3. Skipping...."
    fi
}

pip_install() {
    local package="${1}"
    local installed=$(pip list \
                             | grep -E "^${package}\s\([0-9\.]*\)$" \
                             | grep -o "${package}")
    if [[ "${installed}" = ""  ]]; then
        echo "Installing ${package} via python pip"
        sudo pip install "${package}"
        echo "Installation of ${package} completed."
    else
        echo "${package} already installed in pip. Skipping...."
    fi
}

#+END_SRC
* Configuration

** Master Preparer
#+BEGIN_SRC sh
  prepare_packages() {
#      prepare_imap
      prepare_sumy
  }
#+END_SRC
** Offline IMAP
#+BEGIN_SRC sh
  prepare_imap() {
      sudo sed -i '/ENABLED=0/s/^#//' /etc/default/dovecot
  }
#+END_SRC

** Sumy
#+BEGIN_SRC sh
  prepare_sumy() {
      python -m nltk.downloader punkt
  }
#+END_SRC

* Update
#+BEGIN_SRC sh
  update_all() {
      tangle_code
      install_package_deps
      install_emacs_deps
  }
#+END_SRC

* Conkeror-Nightlies
#+BEGIN_SRC sh
  install_conkeror() {
      echo "# Conkeror See: http://noone.org/conkeror-nightly-debs/" | sudo tee --append /etc/apt/sources.list
      echo "deb     http://noone.org/conkeror-nightly-debs jessie main" | sudo tee --append /etc/apt/sources.list
      echo "deb-src http://noone.org/conkeror-nightly-debs jessie main" | sudo tee --append /etc/apt/sources.list
      sudo apt-key adv --keyserver pgp.uni-mainz.de --recv-keys 80379429
      sudo apt-get update
      sudo apt-get upgrade
      sudo apt-get install conkeror
  }
#+END_SRC
* Link from Mobile Home

#+BEGIN_SRC sh
  link_mobile_home() {
      ln -s "${MOBILE_HOME}"/.gnupg/ /media/s2e/.gnupg
      ln -s "${MOBILE_HOME}"/.org /media/s2e/.org
      ln -s "${MOBILE_HOME}"/.s2e /media/s2e/.s2e
      ln -s "${MOBILE_HOME}"/.s2e/.notmuch.conf /media/s2e/.notmuch-config
      ln -s "${MOBILE_HOME}"/.s2e/.offlineimaprc /media/s2e/.offlineimaprc
      ln -s "${MOBILE_HOME}"/code/.dotfiles/ /media/s2e/.dotfiles
      ln -s "${MOBILE_HOME}"/personal/ /media/s2e/personal
      ln -s "${MOBILE_HOME}"/work/ /media/s2e/work
  }
#+END_SRC

* Main

#+BEGIN_SRC sh
  main() {
      create_emacs_paths
      link_mobile_home
      tangle_code
      link_lisp
      install_package_deps
      install_emacs_deps
      prepare_packages
  }

#+END_SRC

Actually run everything.

#+BEGIN_SRC sh
install_package_deps
#main
#+END_SRC


* Technical Section
This file originally came from an [[http://orgmode.org][org-mode]] file.
Create the script by tangling it with: =C-c C-v t=

#+PROPERTY: tangle ~/.bin/install
#+PROPERTY: comments org
#+PROPERTY: shebang #!/usr/bin/env bash
#+DESCRIPTION: Installs the various packages that I need.
