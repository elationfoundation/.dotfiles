#+TITLE: Org Utils
#+AUTHOR: seamus tuohy
#+EMAIL: stuohy@internews.org
#+DATE: 2015 Jul 21
#+TAGS: org

** Header components
#+BEGIN_SRC emacs-lisp
;; org-heading-components
;; Return the components of the current heading.
;; This is a list with the following elements:
;; 0 - the level as an integer
;; 1 - the reduced level, different if `org-odd-levels-only' is set.
;; 2 - the TODO keyword, or nil
;; 3 - the priority character, like ?A, or nil if no priority is given
;; 4 - the headline text itself, or the tags string if no headline text
;; 5 - the tags string, or nil.

(defun org-utils-get-level-at-point()
  (nth 0 (org-heading-components)))
(defun org-utils-get-level-reduced-at-point()
  (nth 1 (org-heading-components)))
(defun org-utils-get-todo-keyword-at-point()
  (nth 2 (org-heading-components)))
(defun org-utils-get-priority-at-point()
  (nth 3 (org-heading-components)))
(defun org-utils-get-header-at-point()
  (nth 4 (org-heading-components)))
(defun org-utils-get-tag-string-at-point()
  (nth 5 (org-heading-components)))
#+END_SRC


** Time

This function was slightly modded from org-insert-time-stamp which can be found in org-el

#+BEGIN_SRC emacs-lisp
(defun org-utils-get-time-stamp (time &optional with-hm inactive)
  "Return a date stamp for the date given by the internal TIME.
WITH-HM means use the stamp format that includes the time of the day.
INACTIVE means use square brackets instead of angular ones, so that the
stamp will not contribute to the agenda.
The command returns the requested time stamp."
  (let ((fmt (funcall (if with-hm 'cdr 'car) org-time-stamp-formats))
        stamp)
    (if inactive (setq fmt (concat "[" (substring fmt 1 -1) "]")))
    (setq stamp (format-time-string fmt time))))
#+END_SRC



* Technical Artifacts

  Make sure that we can simply =require= this library.

#+BEGIN_SRC elisp
  (provide 'org-utils)
#+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: Org mode helper snippets I use to make my code easier to understand.
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs.d/elisp/org-utils.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
